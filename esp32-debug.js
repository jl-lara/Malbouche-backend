/**
 * Script de diagn√≥stico para ESP32 - Backend Communication
 * Ejecutar con: node esp32-debug.js
 */

import axios from 'axios';

const ESP32_IP = '192.168.0.175';

async function testESP32Connectivity() {
  console.log('üîç Diagn√≥stico de conectividad ESP32 Backend');
  console.log('=' * 50);
  
  // Test 1: Ping b√°sico
  console.log('\n1. Test de conectividad b√°sica...');
  try {
    const response = await axios.get(`http://${ESP32_IP}/`, {
      timeout: 5000
    });
    console.log('‚úÖ ESP32 responde correctamente');
    console.log('üìÑ Respuesta:', response.data);
  } catch (error) {
    console.log('‚ùå ESP32 no responde:', error.message);
    console.log('üîß C√≥digo de error:', error.code);
    return;
  }

  // Test 2: Ping endpoint espec√≠fico
  console.log('\n2. Test de endpoint /ping...');
  try {
    const response = await axios.get(`http://${ESP32_IP}/ping`, {
      timeout: 5000
    });
    console.log('‚úÖ Endpoint /ping funciona');
    console.log('üìÑ Respuesta:', response.data);
  } catch (error) {
    console.log('‚ùå Endpoint /ping fall√≥:', error.message);
  }

  // Test 3: Comando left
  console.log('\n3. Test de comando left...');
  try {
    const response = await axios.get(`http://${ESP32_IP}/left`, {
      timeout: 15000
    });
    console.log('‚úÖ Comando left ejecutado');
    console.log('üìÑ Respuesta:', response.data);
  } catch (error) {
    console.log('‚ùå Comando left fall√≥:', error.message);
    console.log('üîß C√≥digo de error:', error.code);
    console.log('üîß Timeout:', error.timeout);
  }

  // Test 4: Verificar red local
  console.log('\n4. Informaci√≥n de red...');
  try {
    const os = await import('os');
    const networkInterfaces = os.networkInterfaces();
    
    console.log('üåê Interfaces de red del servidor:');
    Object.keys(networkInterfaces).forEach(name => {
      const addresses = networkInterfaces[name];
      addresses.forEach(addr => {
        if (!addr.internal && addr.family === 'IPv4') {
          console.log(`   ${name}: ${addr.address}`);
        }
      });
    });
  } catch (error) {
    console.log('‚ùå Error obteniendo info de red:', error.message);
  }
}

// Ejecutar diagn√≥stico
testESP32Connectivity()
  .then(() => {
    console.log('\nüèÅ Diagn√≥stico completado');
  })
  .catch(error => {
    console.error('‚ùå Error en diagn√≥stico:', error);
  });
